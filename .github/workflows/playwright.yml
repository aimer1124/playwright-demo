name: Playwright Tests

permissions:
  contents: read
  actions: read
  checks: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  api-tests:
    name: API Tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Generate BDD tests
      run: |
        echo "Generating BDD tests for API project"
        npm run bdd:gen
        echo "Generated files for API tests:"
        if [ -d ".features-gen/api-tests" ]; then
          find .features-gen/api-tests -name "*.js" -type f || echo "No JS files found"
        else
          echo "Directory .features-gen/api-tests not found"
          find .features-gen -type f || echo "No generated files found"
        fi
    
    - name: Run API Tests
      run: |
        echo "Running API tests"
        npx playwright test --project=api-tests --reporter=list
      env:
        CI: true
        API_BASE_URL: https://jsonplaceholder.typicode.com
    
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-report
        path: playwright-report/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload API Allure results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-allure-results
        path: allure-results/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload API traces
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: api-test-traces
        path: test-results/
        retention-days: 30

  ui-tests:
    name: UI Tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: api-tests  # UI tests only run after API tests pass
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install chromium --with-deps
    
    - name: Generate BDD tests
      run: |
        echo "Generating BDD tests for UI project"
        npm run bdd:gen
        echo "Generated files for UI tests:"
        if [ -d ".features-gen/ui-tests" ]; then
          find .features-gen/ui-tests -name "*.js" -type f || echo "No JS files found"
        else
          echo "Directory .features-gen/ui-tests not found"
          find .features-gen -type f || echo "No generated files found"
        fi
    
    - name: Run UI Tests
      run: |
        echo "Running UI tests"
        npx playwright test --project=ui-tests --reporter=list
      env:
        CI: true
        BASE_URL: https://playwright.dev
    
    - name: Upload UI test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-test-report
        path: playwright-report/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload UI Allure results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ui-allure-results
        path: allure-results/
        retention-days: 30
        if-no-files-found: warn
    
    - name: Upload UI traces
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: ui-test-traces
        path: test-results/
        retention-days: 30

  summary:
    name: Test Summary
    if: always()
    needs: [api-tests, ui-tests]
    runs-on: ubuntu-latest
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- API Tests: ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- UI Tests: ${{ needs.ui-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.api-tests.result }}" = "success" ] && [ "${{ needs.ui-tests.result }}" = "success" ]; then
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.api-tests.result }}" = "failure" ]; then
          echo "❌ API tests failed - UI tests were not executed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.ui-tests.result }}" = "failure" ]; then
          echo "❌ UI tests failed - API tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  Some tests were skipped or cancelled" >> $GITHUB_STEP_SUMMARY
        fi